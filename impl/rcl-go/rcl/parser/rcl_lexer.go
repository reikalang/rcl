// Code generated from spec/RCL.g4 by ANTLR 4.7.1. DO NOT EDIT.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 16, 137,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 3, 2, 3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 6, 3, 6,
	3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 5, 8,
	59, 10, 8, 3, 9, 3, 9, 3, 9, 7, 9, 64, 10, 9, 12, 9, 14, 9, 67, 11, 9,
	5, 9, 69, 10, 9, 3, 10, 6, 10, 72, 10, 10, 13, 10, 14, 10, 73, 3, 10, 3,
	10, 6, 10, 78, 10, 10, 13, 10, 14, 10, 79, 3, 11, 3, 11, 3, 11, 7, 11,
	85, 10, 11, 12, 11, 14, 11, 88, 11, 11, 3, 11, 3, 11, 3, 12, 3, 12, 7,
	12, 94, 10, 12, 12, 12, 14, 12, 97, 11, 12, 3, 13, 3, 13, 3, 14, 3, 14,
	3, 14, 3, 15, 5, 15, 105, 10, 15, 3, 16, 3, 16, 3, 16, 3, 16, 3, 17, 3,
	17, 3, 17, 3, 17, 7, 17, 115, 10, 17, 12, 17, 14, 17, 118, 11, 17, 3, 17,
	3, 17, 3, 17, 3, 17, 3, 17, 3, 18, 3, 18, 3, 18, 3, 18, 7, 18, 129, 10,
	18, 12, 18, 14, 18, 132, 11, 18, 3, 18, 3, 18, 3, 18, 3, 18, 4, 116, 130,
	2, 19, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21,
	12, 23, 13, 25, 2, 27, 2, 29, 2, 31, 14, 33, 15, 35, 16, 3, 2, 9, 3, 2,
	51, 59, 4, 2, 36, 36, 94, 94, 3, 2, 99, 124, 3, 2, 50, 59, 10, 2, 36, 36,
	49, 49, 94, 94, 100, 100, 104, 104, 112, 112, 116, 116, 118, 118, 5, 2,
	67, 92, 97, 97, 99, 124, 5, 2, 11, 12, 15, 15, 34, 34, 2, 143, 2, 3, 3,
	2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3,
	2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19,
	3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 31, 3, 2, 2, 2, 2,
	33, 3, 2, 2, 2, 2, 35, 3, 2, 2, 2, 3, 37, 3, 2, 2, 2, 5, 39, 3, 2, 2, 2,
	7, 41, 3, 2, 2, 2, 9, 43, 3, 2, 2, 2, 11, 45, 3, 2, 2, 2, 13, 47, 3, 2,
	2, 2, 15, 58, 3, 2, 2, 2, 17, 68, 3, 2, 2, 2, 19, 71, 3, 2, 2, 2, 21, 81,
	3, 2, 2, 2, 23, 91, 3, 2, 2, 2, 25, 98, 3, 2, 2, 2, 27, 100, 3, 2, 2, 2,
	29, 104, 3, 2, 2, 2, 31, 106, 3, 2, 2, 2, 33, 110, 3, 2, 2, 2, 35, 124,
	3, 2, 2, 2, 37, 38, 7, 63, 2, 2, 38, 4, 3, 2, 2, 2, 39, 40, 7, 125, 2,
	2, 40, 6, 3, 2, 2, 2, 41, 42, 7, 46, 2, 2, 42, 8, 3, 2, 2, 2, 43, 44, 7,
	127, 2, 2, 44, 10, 3, 2, 2, 2, 45, 46, 7, 93, 2, 2, 46, 12, 3, 2, 2, 2,
	47, 48, 7, 95, 2, 2, 48, 14, 3, 2, 2, 2, 49, 50, 7, 118, 2, 2, 50, 51,
	7, 116, 2, 2, 51, 52, 7, 119, 2, 2, 52, 59, 7, 103, 2, 2, 53, 54, 7, 104,
	2, 2, 54, 55, 7, 99, 2, 2, 55, 56, 7, 110, 2, 2, 56, 57, 7, 117, 2, 2,
	57, 59, 7, 103, 2, 2, 58, 49, 3, 2, 2, 2, 58, 53, 3, 2, 2, 2, 59, 16, 3,
	2, 2, 2, 60, 69, 7, 50, 2, 2, 61, 65, 9, 2, 2, 2, 62, 64, 5, 25, 13, 2,
	63, 62, 3, 2, 2, 2, 64, 67, 3, 2, 2, 2, 65, 63, 3, 2, 2, 2, 65, 66, 3,
	2, 2, 2, 66, 69, 3, 2, 2, 2, 67, 65, 3, 2, 2, 2, 68, 60, 3, 2, 2, 2, 68,
	61, 3, 2, 2, 2, 69, 18, 3, 2, 2, 2, 70, 72, 5, 25, 13, 2, 71, 70, 3, 2,
	2, 2, 72, 73, 3, 2, 2, 2, 73, 71, 3, 2, 2, 2, 73, 74, 3, 2, 2, 2, 74, 75,
	3, 2, 2, 2, 75, 77, 7, 48, 2, 2, 76, 78, 5, 25, 13, 2, 77, 76, 3, 2, 2,
	2, 78, 79, 3, 2, 2, 2, 79, 77, 3, 2, 2, 2, 79, 80, 3, 2, 2, 2, 80, 20,
	3, 2, 2, 2, 81, 86, 7, 36, 2, 2, 82, 85, 5, 27, 14, 2, 83, 85, 10, 3, 2,
	2, 84, 82, 3, 2, 2, 2, 84, 83, 3, 2, 2, 2, 85, 88, 3, 2, 2, 2, 86, 84,
	3, 2, 2, 2, 86, 87, 3, 2, 2, 2, 87, 89, 3, 2, 2, 2, 88, 86, 3, 2, 2, 2,
	89, 90, 7, 36, 2, 2, 90, 22, 3, 2, 2, 2, 91, 95, 9, 4, 2, 2, 92, 94, 5,
	29, 15, 2, 93, 92, 3, 2, 2, 2, 94, 97, 3, 2, 2, 2, 95, 93, 3, 2, 2, 2,
	95, 96, 3, 2, 2, 2, 96, 24, 3, 2, 2, 2, 97, 95, 3, 2, 2, 2, 98, 99, 9,
	5, 2, 2, 99, 26, 3, 2, 2, 2, 100, 101, 7, 94, 2, 2, 101, 102, 9, 6, 2,
	2, 102, 28, 3, 2, 2, 2, 103, 105, 9, 7, 2, 2, 104, 103, 3, 2, 2, 2, 105,
	30, 3, 2, 2, 2, 106, 107, 9, 8, 2, 2, 107, 108, 3, 2, 2, 2, 108, 109, 8,
	16, 2, 2, 109, 32, 3, 2, 2, 2, 110, 111, 7, 49, 2, 2, 111, 112, 7, 44,
	2, 2, 112, 116, 3, 2, 2, 2, 113, 115, 11, 2, 2, 2, 114, 113, 3, 2, 2, 2,
	115, 118, 3, 2, 2, 2, 116, 117, 3, 2, 2, 2, 116, 114, 3, 2, 2, 2, 117,
	119, 3, 2, 2, 2, 118, 116, 3, 2, 2, 2, 119, 120, 7, 44, 2, 2, 120, 121,
	7, 49, 2, 2, 121, 122, 3, 2, 2, 2, 122, 123, 8, 17, 2, 2, 123, 34, 3, 2,
	2, 2, 124, 125, 7, 49, 2, 2, 125, 126, 7, 49, 2, 2, 126, 130, 3, 2, 2,
	2, 127, 129, 11, 2, 2, 2, 128, 127, 3, 2, 2, 2, 129, 132, 3, 2, 2, 2, 130,
	131, 3, 2, 2, 2, 130, 128, 3, 2, 2, 2, 131, 133, 3, 2, 2, 2, 132, 130,
	3, 2, 2, 2, 133, 134, 7, 12, 2, 2, 134, 135, 3, 2, 2, 2, 135, 136, 8, 18,
	2, 2, 136, 36, 3, 2, 2, 2, 14, 2, 58, 65, 68, 73, 79, 84, 86, 95, 104,
	116, 130, 3, 8, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'='", "'{'", "','", "'}'", "'['", "']'",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "", "", "", "BOOL", "INT", "DOUBLE", "STRING", "ID", "WS",
	"BLOCK_COMMENT", "SINGLE_COMMENT",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "BOOL", "INT", "DOUBLE",
	"STRING", "ID", "DIGIT", "ESC", "ID_LETTER", "WS", "BLOCK_COMMENT", "SINGLE_COMMENT",
}

type RCLLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewRCLLexer(input antlr.CharStream) *RCLLexer {

	l := new(RCLLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "RCL.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// RCLLexer tokens.
const (
	RCLLexerT__0           = 1
	RCLLexerT__1           = 2
	RCLLexerT__2           = 3
	RCLLexerT__3           = 4
	RCLLexerT__4           = 5
	RCLLexerT__5           = 6
	RCLLexerBOOL           = 7
	RCLLexerINT            = 8
	RCLLexerDOUBLE         = 9
	RCLLexerSTRING         = 10
	RCLLexerID             = 11
	RCLLexerWS             = 12
	RCLLexerBLOCK_COMMENT  = 13
	RCLLexerSINGLE_COMMENT = 14
)
